#!/bin/bash

KSCRIPT_VERSION=1.6.0

## make sure that all requirements (java, kotlinc, maven) to run kscript are met
assertInPath(){ if [ -z "$(which $1)" ]; then echo "[ERROR] Could not locate '$1'" 1>&2; exit 1; fi }

## trim whitespace from a string
trim() { while read -r line; do echo "$line"; done; }

## pad version with 0s. From https://stackoverflow.com/questions/18668556/comparing-numbers-in-bash
function pad_version { printf "%03d%03d%03d" $(echo "$1" | tr '.' ' '); }


assertInPath kotlinc
assertInPath mvn


## cheap curl replacement to avoid dependency on curl
## https://superuser.com/questions/238987/how-does-unix-search-for-executable-files
kurl(){
kscript 'import java.io.*

try {
    BufferedReader(InputStreamReader(java.net.URL(args[0]).openStream())).useLines { it.forEach { println(it) } }
}catch(e: Throwable){
    System.err.println("[ERROR] Could not read from '" + e.message + "'")
    kotlin.system.exitProcess(1)
}
' "$@"
}
# kurl https://git.io/v9R73

## prefer JAVA_HOME over PATH for javac and jar (to stay in sync with kotlinc; see  #6)
if [ -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
    JAVAC_CMD="$JAVA_HOME/bin/javac"
    JAR_CMD="$JAVA_HOME/bin/jar"
fi

assertInPath ${JAVAC_CMD:=javac}
assertInPath ${JAR_CMD:=jar}


## Show basic CLI description if no arguments are provided
if [ $# == 0 ]  || [ "$1" == "-v" ] || [ "$1" == "--version" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "kscript - Enhanced scripting support for Kotlin on *nix-based systems." >&2
    echo "" >&2
    echo "Usage     : kscript <scriptfile, script-url, - for stdin, some kotlin code> [<script_args>]*" >&2
    echo "Usage     : kscript --clear-cache     # wipe cached script jars and urls" >&2
    echo "Usage     : kscript -i                # interactive shell with DEPS as declared in script" >&2
    echo "" >&2
    echo "Copyright : 2017 Holger Brandl"
    echo "License   : MIT" >&2
    echo "Version   : v$KSCRIPT_VERSION" >&2
    echo "Website   : https://github.com/holgerbrandl/kscript" >&2

    ## determine the latest version
    latestVersion=$(kurl https://git.io/v9R73 | grep '^KSCRIPT_VERSION' | cut -f2 -d'=')
    installedVersion=$(echo $KSCRIPT_VERSION | cut -f1 -d'-')

    ## http://stackoverflow.com/questions/15224581/floating-point-comparison-with-variable-in-bash
    if (( $(pad_version ${latestVersion}) > $(pad_version ${installedVersion}) )); then
        ## http://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
        bold=$(tput bold); normal=$(tput sgr0)
        echo -e "\n${bold}A new version (v${latestVersion}) of kscript is available. Use 'kscript --self-update' to update your local kscript installation" >&2
    fi

    exit 0;
fi

## later" custom cache directories? see https://github.com/holgerbrandl/kscript/issues/5
#KSCRIPT_CACHE_DIR=${TMPDIR=/tmp}
KSCRIPT_CACHE_DIR=${HOME}/.kscript

## create cache dir if it does not yet exist
if [[ ! -d ${KSCRIPT_CACHE_DIR} ]]; then
    mkdir ${KSCRIPT_CACHE_DIR}
fi

## optionally clear up the jar cache
if [ "$1" == "--clear-cache" ]; then
    echo "Cleaning up cache..."
    rm -f ${KSCRIPT_CACHE_DIR}/*
    exit 0
fi

## look up resdeps from repo unless we're having a full local test clone of it
if [[ -z "$(which resdeps.kts 2>/dev/null)" ]]; then
    resolve_script_deps(){ kscript "https://raw.githubusercontent.com/holgerbrandl/kscript/v${KSCRIPT_VERSION}/resdeps.kts" "$@"; }
else
    resolve_script_deps(){ resdeps.kts "$@"; }
fi
#resolve_script_deps log4j:log4j:1.2.14


## optionally self-update kscript ot the newest version (if not local copy is not being maintained by sdkman)
if [[ "$1" == "--self-update" ]]; then
    ## choose update strategy depending on installation type
    if  [[ -z "$(which kscript | grep .sdkman)" ]]; then
        echo "Installing latest version of kscript..."
        kurl https://git.io/v9R73 > $(which kscript).tmp && chmod u+x $(which kscript).tmp
        
        # Create and spawn update script (see this may not work https://stackoverflow.com/questions/8595751/is-this-a-valid-self-update-approach-for-a-bash-script)
cat > ${KSCRIPT_CACHE_DIR}/self_update.sh <<EOF
mv "$(which kscript).tmp" "$(which kscript)"
echo "You're now running kscript "$(kscript --help 2>&1| grep Version | cut -f2- | tr -d ':')
EOF
    exec /bin/bash ${KSCRIPT_CACHE_DIR}/self_update.sh

    else
        sdkman_auto_answer=true && sdk install kscript
    fi

    exit 0
fi


## check if interactive mode should be used
if [[ "$1" == "-i" ]]; then
    is_interactive=true;
    shift

    ## make sure to have at least one more argument for the script
    if [[ $# -eq 0 ]]; then echo "[ERROR] Script argument for interactive mode preparation is missing" >&2;  exit 1; fi
fi

## ... or use a cached version of it if possible
#scriptFile="./test.kts"
#scriptFile="test-script.kts"
scriptFile="$1"
shift


## work around missing md5sum on mac
if [ "${OSTYPE//[0-9.]/}" == "darwin" ]; then md5sum(){ md5 -r $1; }; fi
## use just 16 character checksum and make more platform independent
kscript_md5(){ md5sum $1 | cut -c1-16; }



## Support URLs as script files
## http://stackoverflow.com/questions/2172352/in-bash-how-can-i-check-if-a-string-begins-with-some-value
if [[ "$scriptFile" == "http://"* ]] || [[ "$scriptFile" == "https://"* ]]; then
    # scriptFile=https://raw.githubusercontent.com/holgerbrandl/kscript/master/test/resources/url_test.kts
    urlHash=$(kscript_md5 <(echo "$scriptFile"))

    # http://unix.stackexchange.com/questions/174817/finding-the-correct-tmp-dir-on-multiple-platforms
    urlCache=${KSCRIPT_CACHE_DIR}/urlkts_cache_${urlHash}.kts

    if [ ! -f "$urlCache" ]; then
#        echo "fetching kscript from url $scriptFile into ${tmpScript}..."
#        curl -L ${scriptFile} 2>/dev/null > ${urlCache}
        kurl ${scriptFile} > ${urlCache}
        if [ $? -eq 1 ]; then rm ${urlCache}; exit 1; fi
    fi

    scriptFile=${urlCache}
fi


## remap - to the standard input file-descriptor
if [ "$scriptFile" == "-" ]; then scriptFile="/dev/stdin"; fi

## Support for support process substitution and stdin.
# http://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash
# https://viewsby.wordpress.com/2013/09/06/bash-string-ends-with/
if [[ "$scriptFile" != *kts ]] && [[ "$scriptFile" != *kt ]] && [[ -e ${scriptFile} ]] ; then
    stdinCache=${KSCRIPT_CACHE_DIR}/stdinbuffer_${RANDOM}${RANDOM}.kts # odd but works on macos as well
    cat "${scriptFile}" > ${stdinCache}

    ## rename to use checksum as name to allow for jar-caching also when using stdin
    stdinMD5=$(kscript_md5 ${stdinCache})

    ## replace script file with md5 hash file copy of stdin
    scriptFile=$(dirname ${stdinCache})/stdin_${stdinMD5}.kts
    mv ${stdinCache} ${scriptFile}
fi


## if scriptFile is still not a file we assume the input to be a kotlin program directly
## note: -e also supports non-regular files in contrast to -f
if [[ "$scriptFile" != *kts ]] && [[ ! -e ${scriptFile} ]]; then
    ## auto-prefix one-liners with kscript-support api
#    if [[ $(echo "${scriptFile}" | wc -l) -eq 1 ]]; then ## old approach
#    http://stackoverflow.com/questions/2172352/in-bash-how-can-i-check-if-a-string-begins-with-some-value
    trimmedScript=$(echo "${scriptFile}" | tr -d '\n' )
    if [[ $trimmedScript == lines.* ]] || [[ $trimmedScript == stdin.* ]] ; then
        scriptFile=$'//DEPS com.github.holgerbrandl:kscript:1.2.2\nimport kscript.text.*\nval lines = resolveArgFile(args)\n\n'${scriptFile}
    fi

    scriptHash=$(kscript_md5 <(echo "$scriptFile"))

    # http://unix.stackexchange.com/questions/174817/finding-the-correct-tmp-dir-on-multiple-platforms
    cachedScript=${KSCRIPT_CACHE_DIR}/scriptarg_cache_${scriptHash}.kts

    echo "$scriptFile" > ${cachedScript}

    scriptFile=${cachedScript}
fi


## just proceed if the script file is a regular file at this point
#echo "scriptfile is $scriptFile and interactive $is_interactive"
if [[ ! -f ${scriptFile} ]]; then
    echo "[ERROR] Could not open script file '$scriptFile'" 1>&2
    exit 1
fi


## Extract dependencies from script
# kscript /Users/brandl/projects/kotlin/kotlin_playground/src/test_hello.kt
if [ $(grep "^// DEPS" ${scriptFile} | wc -l) -gt 0 ]; then
    echo "[ERROR] Dependencies must be declared by using the line prefix //DEPS" 1>&2; exit 1;
fi

## find all //DEPS directives and concatenate their values
dependencies=$(grep "^//DEPS" ${scriptFile} | cut -f2- -d' ' | trim | tr ',;\n' ' ' | sed 's/ $//g')


## First try dependency cache directly to avoid jvm launch for resdeps.kts
dependency_cache="${KSCRIPT_CACHE_DIR}/dependency_cache.txt"
if [ -n "$dependencies" ] && [ -f "$dependency_cache" ]; then
#    https://stackoverflow.com/questions/22861580/bash-script-check-if-a-file-contains-a-specific-line
    depQuery="$(echo ${dependencies} | tr ' ' ';')"
    classpath=$(awk '$1 == "'$depQuery'"' ${dependency_cache} | cut -d' ' -f2)
fi

## If there are dependencies but cache-lookup failed we run resdeps.kts
if [ -n "$dependencies" ] && [ -z "$classpath" ];then
    classpath=$(resolve_script_deps ${dependencies})
    if [ $? -eq 1 ]; then exit 1; fi
fi

## Extract kotlin arguments
if [ -n "${KOTLIN_OPTS}" ];then
  kotlin_opts=$KOTLIN_OPTS
else
  kotlin_opts="$(grep -F "//KOTLIN_OPTS" ${scriptFile} | head -n1 | cut -f2- -d' ')"
fi


## Optionally enter interactive mode
if [ "$is_interactive" = true ]; then
    echo "Creating REPL from ${scriptFile}" >&2
    echo "kotlinc ${kotlin_opts} -classpath '${classpath}'" >&2
    exec kotlinc ${kotlin_opts} -classpath "${classpath}"
fi

#echo "script file is $scriptFile"
scriptFileExt=".${scriptFile##*.}"
scriptCheckSum=$(kscript_md5 ${scriptFile})

## we can use readlink here which is not functional on macos, thus:
# http://stackoverflow.com/questions/3915040/bash-fish-command-to-print-absolute-path-to-a-file
#abspath() { echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"; }
#abspath() {
#    if [[ $OSTYPE != darwin* ]]; then minusFarg="-f"; fi
#    echo "$(readlink ${minusFarg} $1)";
#}


## Even if we just need and support the//ENTRY directive in case of kt-class files, we extract
## it here to fail if it was used in kts files.
entryDirective=$(grep "^//ENTRY" ${scriptFile} | cut -f2- -d' ' | trim)
if [[ -n "${entryDirective}" ]] && [[ ${scriptFileExt} == ".kts" ]] ; then
    echo "ERROR: //ENTRY directive is just supported for kt class files" >&2
    exit 1;
fi


#https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
jarFile=${KSCRIPT_CACHE_DIR}/$(basename ${scriptFile} .kts).${scriptCheckSum}.jar


## capitalize first letter and get rid of dashes (since this is what kotlin compiler is doing for the wrapper to create a valid java class name)
className=$(basename ${scriptFile} ${scriptFileExt} | tr '-' '_' | tr '.' '_')
#className="${className^}" ## disabled because requires bash4 and thus not on macos
className=$(echo ${className:0:1} | tr  '[a-z]' '[A-Z]')${className:1}



if [[ $scriptFileExt == ".kts" ]]; then
    execClassName=Main_${className}

elif [[ $scriptFileExt == ".kt" ]]; then
#    entryDirective=$(grep "^//ENTRY" ${scriptFile} | cut -f2- -d' ' | trim)

     # use default entry directive if not defined
    if [[ -z "$entryDirective" ]]; then
        entryDirective="${className}Kt"
    else
        entryDirective=${entryDirective}
    fi

    package=$(grep "^package" ${scriptFile} | cut -f2- -d' ')"."
    package=$(echo ${package} | sed 's/^.$//g')

    execClassName="${package}${entryDirective}"
fi


# build cache-jar if it does not yet exist
if [ ! -f "${jarFile}" ]; then
    ## remove previous (now outdated) cache jars
    rm -f .$(basename ${scriptFile} .kts).*.jar


    kotlinc  -classpath "${classpath}" -d ${jarFile} ${scriptFile}

    if [ $? -eq 1 ]; then
        echo "[ERROR] compilation of '$scriptFile' failed" >&2
        exit 1;
    fi

    if [[ $scriptFileExt == ".kts" ]]; then
        execClassName=Main_${className}

        # note xxxx placeholder does not work on macos but mktemp creates unique path alreade
        mainJava=$(mktemp -dt kscript.XXXXXX)/${execClassName}.java

        echo '
        public class Main_'${className}' {
            public static void main(String... args) throws Exception {
                Class script = Main_'${className}'.class.getClassLoader().loadClass("'${className}'");
                script.getDeclaredConstructor(String[].class).newInstance((Object)args);
            }
        }
        '> ${mainJava}

        ${JAVAC_CMD:=javac} ${mainJava}  2> /dev/null

        ## update the jar to include main-wrapper
        (cd $(dirname ${mainJava}) && ${JAR_CMD:=jar} uf ${jarFile} $(basename ${mainJava%%.java}.class))
    fi
fi

#echo "genClassName is ${className}"
#echo "execClassName is ${execClassName}"
#echo "jar file is ${jarFile}"


## disabled since kotlin binary fails to add kotlin-stdb when using jar as sole argument
## update manifest to specify main class
#echo "Main-Class: Main_${className}" > ${mainJava}.manimain
#jar ufm ${jarFile} ${mainJava}.manimain
#jar tf ${jarFile}


# Infer KOTLIN_HOME from kotlinc if not set
if [ -z "$KOTLIN_HOME" ]; then
    ## see discussion on https://github.com/holgerbrandl/kscript/issues/15
    KOTLIN_HOME=$(KOTLIN_RUNNER=1 JAVACMD=echo kotlinc | awk 'NR>1' RS=' ' | grep -F kotlin.home= | cut -d= -f2)
fi

## fail if KOTLIN_HOME is still unknown or does not exist
if [ ! -d "$KOTLIN_HOME" ]; then
    echo "[ERROR] KOTLIN_HOME is not set and could not be inferred from context" >&2
    exit 1;
fi


# http://stackoverflow.com/questions/3706689/java-class-files-in-current-directory
# also see https://youtrack.jetbrains.com/issue/KT-17100
exec kotlin ${kotlin_opts} -classpath ${jarFile}:${KOTLIN_HOME}/lib/kotlin-script-runtime.jar:"${classpath}" ${execClassName} "$@"
